import streamlit as st
import random
import math
from collections import defaultdict

# =============== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===============

def generate_round_robin_schedule(players):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞."""
    players = players[:]
    n = len(players)
    if n % 2 == 1:
        players.append("BYE")
        n += 1

    rounds = []
    for r in range(n - 1):
        pairs = []
        for i in range(n // 2):
            p1 = players[i]
            p2 = players[n - 1 - i]
            if p1 == "BYE":
                pairs.append((None, p2))
            elif p2 == "BYE":
                pairs.append((p1, None))
            else:
                pairs.append((p1, p2))
        rounds.append(pairs)
        players = [players[0]] + [players[-1]] + players[1:-1]
    return rounds

def initial_pairing(players):
    random.shuffle(players)
    pairs = [(players[i], players[i+1]) for i in range(0, len(players) - 1, 2)]
    bye = players[-1] if len(players) % 2 == 1 else None
    return pairs, bye

def swiss_pairing(players, scores, played_pairs, bye_history):
    n = len(players)
    is_odd = (n % 2 == 1)
    sorted_players = sorted(players, key=lambda x: (-scores[x], random.random()))
    paired = set()
    pairs = []

    for i, p1 in enumerate(sorted_players):
        if p1 in paired:
            continue
        opponent = None
        for p2 in sorted_players[i+1:]:
            if p2 in paired:
                continue
            if frozenset({p1, p2}) in played_pairs:
                continue
            if abs(scores[p1] - scores[p2]) <= 0.5:
                opponent = p2
                break
        if opponent:
            pairs.append((p1, opponent))
            paired.add(p1)
            paired.add(opponent)
            played_pairs.add(frozenset({p1, p2}))

    unpaired = [p for p in players if p not in paired]
    bye = None

    if is_odd:
        if len(unpaired) == 1:
            bye = unpaired[0]
        elif len(unpaired) > 1:
            unpaired_sorted = sorted(unpaired, key=lambda x: (scores[x], random.random()))
            candidates = [p for p in unpaired_sorted if p not in bye_history]
            if not candidates:
                candidates = unpaired_sorted
            bye = candidates[0]
            others = [p for p in unpaired if p != bye]
            random.shuffle(others)
            for i in range(0, len(others) - 1, 2):
                a, b = others[i], others[i+1]
                if frozenset({a, b}) not in played_pairs:
                    pairs.append((a, b))
                    played_pairs.add(frozenset({a, b}))
    return pairs, bye

def calculate_buchholz(players, scores, opponents):
    buchholz = {}
    for p in players:
        total = sum(scores[opp] for opp in opponents[p])
        buchholz[p] = total
    return buchholz

# =============== –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===============

st.set_page_config(page_title="–®–∞—Ö–º–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä", layout="wide")
st.title("‚ôüÔ∏è –®–∞—Ö–º–∞—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "initialized" not in st.session_state:
    st.session_state.initialized = False
    st.session_state.players = []
    st.session_state.scores = {}
    st.session_state.opponents = defaultdict(list)
    st.session_state.played_pairs = set()
    st.session_state.bye_history = set()
    st.session_state.total_rounds = 0
    st.session_state.current_round = 0
    st.session_state.is_round_robin = False
    st.session_state.round_robin_schedule = []
    st.session_state.tour_data = {}
    st.session_state.completed = False

# =============== –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–ø—Ä–æ—Å—Ç–∞—è, –±–µ–∑ —Ñ–æ—Ä–º—É–ª) ===============
with st.expander("üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", expanded=not st.session_state.initialized):
    st.markdown("""
    **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π:**

    1. **–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤** ‚Äî —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ.  
       –ü—Ä–∏–º–µ—Ä: `–ê–Ω–Ω–∞, –ë–æ—Ä–∏—Å, –í–µ—Ä–∞` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫.

    2. **–¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:**  
       ‚Ä¢ **2‚Äì8 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤** ‚Üí –∫—Ä—É–≥–æ–≤–æ–π —Ç—É—Ä–Ω–∏—Ä (–∫–∞–∂–¥—ã–π –∏–≥—Ä–∞–µ—Ç —Å –∫–∞–∂–¥—ã–º);  
       ‚Ä¢ **9 –∏ –±–æ–ª—å—à–µ** ‚Üí —à–≤–µ–π—Ü–∞—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ (—É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä–∞—é—Ç —Å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞–º–∏ —Å –ø–æ—Ö–æ–∂–∏–º —Å—á—ë—Ç–æ–º).

    3. **–î–ª—è —à–≤–µ–π—Ü–∞—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã** –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç—É—Ä–æ–≤ –ø—Ä–æ–≤–µ—Å—Ç–∏.  
       –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∞–º–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç **—Ä–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω**:  
       ‚Äì –Ω–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è),  
       ‚Äì –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ (—á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª –¥–≤–∞–∂–¥—ã —Å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º).

    4. **–í–æ –≤—Ä–µ–º—è —Ç—É—Ä–æ–≤:**  
       ‚Äì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏: –ø–æ–±–µ–¥–∞ –æ–¥–Ω–æ–≥–æ, –ø–æ–±–µ–¥–∞ –¥—Ä—É–≥–æ–≥–æ –∏–ª–∏ –Ω–∏—á—å—è;  
       ‚Äì –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –æ–¥–∏–Ω –æ—Ç–¥—ã—Ö–∞–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç **BYE** (+1 –æ—á–∫–æ).

    5. **–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤** –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:  
       ‚Äì –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –æ—á–∫–∞–º, –∑–∞—Ç–µ–º –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É (–ë—É—Ö–≥–æ–ª—å—Ü);  
       ‚Äì –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ –º–µ—Å—Ç–∞ –æ—Ç–º–µ—á–µ–Ω—ã –º–µ–¥–∞–ª—è–º–∏: üëë ü•à ü•â

    –£–¥–∞—á–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ! ‚ôüÔ∏è
    """)

# =============== –í–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤—ã–±–æ—Ä —á–∏—Å–ª–∞ —Ç—É—Ä–æ–≤ ===============
if not st.session_state.initialized:
    names_input = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–π):",
        height=100,
        placeholder="–ê–Ω–Ω–∞, –ë–æ—Ä–∏—Å, –í–µ—Ä–∞\n–∏–ª–∏\n–ê–Ω–Ω–∞\n–ë–æ—Ä–∏—Å\n–í–µ—Ä–∞"
    )

    names = []
    raw = names_input.strip()
    if raw:
        names = [n.strip() for n in raw.replace("\n", ",").split(",") if n.strip()]
        names = list(dict.fromkeys(names))

    n_players = len(names)
    is_round_robin = (2 <= n_players <= 8)

    if n_players > 0:
        st.info(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {n_players} ‚Üí {'–∫—Ä—É–≥–æ–≤–æ–π —Ç—É—Ä–Ω–∏—Ä' if is_round_robin else '—à–≤–µ–π—Ü–∞—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞'}")

    total_rounds_input = 6
    if n_players >= 9:
        # –ú–∞–∫—Å–∏–º—É–º –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á = —á–∏—Å–ª–æ —Ç—É—Ä–æ–≤ –≤ –∫—Ä—É–≥–æ–≤–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
        if n_players % 2 == 1:
            max_rounds_circle = n_players
        else:
            max_rounds_circle = n_players - 1

        max_allowed = min(11, max_rounds_circle)

        # –ú–∏–Ω–∏–º—É–º: ceil(log2(N)), –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 3
        min_theoretical = math.ceil(math.log2(n_players))
        min_allowed = max(3, min_theoretical)

        if min_allowed > max_allowed:
            min_allowed = max_allowed

        default_rounds = min(min_allowed + 2, max_allowed)

        total_rounds_input = st.slider(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤:",
            min_value=min_allowed,
            max_value=max_allowed,
            value=default_rounds,
            help=f"–î–ª—è {n_players} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ —á–∏—Å–ª–æ —Ç—É—Ä–æ–≤ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á ‚Äî {max_rounds_circle}."
        )
    elif is_round_robin:
        auto_rounds = n_players - 1 if n_players % 2 == 0 else n_players
        st.info(f"–ö—Ä—É–≥–æ–≤–æ–π —Ç—É—Ä–Ω–∏—Ä: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {auto_rounds} —Ç—É—Ä–æ–≤.")

    if st.button("–ù–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", type="primary"):
        if not raw:
            st.error("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–º—è!")
        elif n_players < 2:
            st.error("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞!")
        else:
            st.session_state.players = names
            st.session_state.is_round_robin = is_round_robin
            st.session_state.scores = {p: 0.0 for p in names}
            st.session_state.opponents = defaultdict(list)
            st.session_state.played_pairs.clear()
            st.session_state.bye_history.clear()
            st.session_state.tour_data = {}
            st.session_state.completed = False

            if is_round_robin:
                st.session_state.total_rounds = n_players - 1 if n_players % 2 == 0 else n_players
            else:
                st.session_state.total_rounds = total_rounds_input

            if is_round_robin:
                st.session_state.round_robin_schedule = generate_round_robin_schedule(names)

            for rnd in range(1, st.session_state.total_rounds + 1):
                st.session_state.tour_data[rnd] = {
                    "pairs": [],
                    "bye": None,
                    "results": [],
                    "completed": False
                }

            # –ü–µ—Ä–≤—ã–π —Ç—É—Ä
            if is_round_robin:
                round_pairs = st.session_state.round_robin_schedule[0]
                real_pairs = []
                bye = None
                for p1, p2 in round_pairs:
                    if p1 is None:
                        bye = p2
                    elif p2 is None:
                        bye = p1
                    else:
                        real_pairs.append((p1, p2))
                st.session_state.tour_data[1]["pairs"] = real_pairs
                st.session_state.tour_data[1]["bye"] = bye
            else:
                pairs, bye = initial_pairing(names[:])
                st.session_state.tour_data[1]["pairs"] = pairs
                st.session_state.tour_data[1]["bye"] = bye
                if bye:
                    st.session_state.bye_history.add(bye)

            st.session_state.current_round = 1
            st.session_state.initialized = True
            st.rerun()

# =============== –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ ===============
if st.session_state.initialized and not st.session_state.completed:
    current = st.session_state.current_round
    data = st.session_state.tour_data[current]

    st.subheader(f"–¢—É—Ä {current}")

    if data["completed"]:
        st.success("‚úÖ –¢—É—Ä –∑–∞–≤–µ—Ä—à—ë–Ω")
        for p1, p2, res in data["results"]:
            st.write(f"**{p1} ‚Äî {p2}**: {res}")
        if data["bye"]:
            st.info(f"BYE: {data['bye']} (+1 –æ—á–∫–æ)")
        if current < st.session_state.total_rounds:
            if st.button(f"–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—É—Ä—É {current + 1}"):
                st.session_state.current_round += 1
                next_rnd = current + 1
                if not st.session_state.tour_data[next_rnd]["pairs"]:
                    if st.session_state.is_round_robin:
                        round_pairs = st.session_state.round_robin_schedule[next_rnd - 1]
                        real_pairs = []
                        bye = None
                        for p1, p2 in round_pairs:
                            if p1 is None:
                                bye = p2
                            elif p2 is None:
                                bye = p1
                            else:
                                real_pairs.append((p1, p2))
                        st.session_state.tour_data[next_rnd]["pairs"] = real_pairs
                        st.session_state.tour_data[next_rnd]["bye"] = bye
                    else:
                        pairs, bye = swiss_pairing(
                            st.session_state.players,
                            st.session_state.scores,
                            st.session_state.played_pairs,
                            st.session_state.bye_history
                        )
                        st.session_state.tour_data[next_rnd]["pairs"] = pairs
                        st.session_state.tour_data[next_rnd]["bye"] = bye
                        if bye:
                            st.session_state.bye_history.add(bye)
                st.rerun()
        else:
            if st.button("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"):
                st.session_state.completed = True
                st.rerun()
    else:
        results = []
        for i, (p1, p2) in enumerate(data["pairs"]):
            col1, col2 = st.columns([3, 1])
            with col1:
                st.write(f"**{p1} ‚Äî {p2}**")
            with col2:
                res = st.selectbox(
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}",
                    options=["1-0", "0-1", "1/2-1/2"],
                    index=2,
                    key=f"res_{current}_{i}",
                    label_visibility="collapsed"
                )
                results.append((p1, p2, res))

        if data["bye"]:
            st.info(f"BYE: {data['bye']} (+1 –æ—á–∫–æ)")

        if st.button("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä", type="primary"):
            for p1, p2, res in results:
                st.session_state.opponents[p1].append(p2)
                st.session_state.opponents[p2].append(p1)
                st.session_state.played_pairs.add(frozenset({p1, p2}))
                if res == "1-0":
                    st.session_state.scores[p1] += 1.0
                elif res == "0-1":
                    st.session_state.scores[p2] += 1.0
                elif res == "1/2-1/2":
                    st.session_state.scores[p1] += 0.5
                    st.session_state.scores[p2] += 0.5

            if data["bye"]:
                st.session_state.scores[data["bye"]] += 1.0

            st.session_state.tour_data[current]["results"] = results
            st.session_state.tour_data[current]["completed"] = True

            if current == st.session_state.total_rounds:
                st.session_state.completed = True

            st.rerun()

# =============== –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===============
if st.session_state.initialized:
    st.divider()
    st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    buchholz = calculate_buchholz(
        st.session_state.players,
        st.session_state.scores,
        st.session_state.opponents
    )

    sorted_players = sorted(
        st.session_state.players,
        key=lambda x: (-st.session_state.scores[x], -buchholz[x], x)
    )

    table_data = []
    place = 1
    prev_key = None
    for name in sorted_players:
        score = st.session_state.scores[name]
        bh = buchholz[name]
        current_key = (score, bh)
        displayed_place = place if prev_key is None or current_key != prev_key else displayed_place
        medal = " üëë" if displayed_place == 1 else " ü•à" if displayed_place == 2 else " ü•â" if displayed_place == 3 else ""
        table_data.append({
            "–ú–µ—Å—Ç–æ": displayed_place,
            "–ò–º—è": name + medal,
            "–û—á–∫–∏": f"{score:.1f}",
            "–ë—É—Ö–≥–æ–ª—å—Ü": f"{bh:.1f}"
        })
        prev_key = current_key
        place += 1

    st.dataframe(table_data, use_container_width=True, hide_index=True)

# =============== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===============
if st.session_state.completed:
    st.balloons()
    st.success("üèÜ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!")
